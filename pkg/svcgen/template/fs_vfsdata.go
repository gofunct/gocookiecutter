// Code generated by vfsgen; DO NOT EDIT.

// +build !vfsgen

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FS statically implements the virtual filesystem provided to vfsgen.
var FS = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 30, 4, 13, 20, 0, time.UTC),
		},
		"/{{.ProtoDir}}": &vfsgen۰DirInfo{
			name:    "{{.ProtoDir}}",
			modTime: time.Date(2018, 12, 30, 4, 13, 20, 0, time.UTC),
		},
		"/{{.ProtoDir}}/{{.Path}}.proto.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "{{.Path}}.proto.tmpl",
			modTime:          time.Date(2018, 12, 30, 4, 13, 20, 0, time.UTC),
			uncompressedSize: 686,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\xbb\x6e\xc3\x30\x0c\x9c\xab\xaf\x20\x3c\x25\x43\xdc\xa1\x5b\x02\x2f\x1d\xfa\x18\x52\x18\x49\xf6\x42\x89\x59\xc5\x68\x2c\xa9\x92\x52\xd4\x10\xf8\xef\x05\x65\xd9\x70\x33\xd5\x13\x75\x3c\xdf\x1d\xcf\xf7\x3a\xc8\x1f\xa8\xa0\xb0\xce\x04\xf3\x50\x6c\x84\xb0\xf2\xf4\x29\x15\x42\x8c\x50\xd6\x8c\x96\x75\x46\x88\x36\x42\x18\x1b\x5a\xa3\x41\x99\xf7\x91\x58\x41\x91\xb8\xc7\xe7\x89\x5a\xcb\x70\x66\xfa\x2d\xfe\x26\x3b\x96\x61\x9b\x18\x9d\xd4\x0a\x47\x8f\xd7\xce\x1a\x17\x3c\x91\x68\xd3\xc4\x9a\x65\x62\xc6\xb8\x02\xd4\x0d\x91\x10\x1e\xdd\x77\x7b\x1a\xa2\xed\x87\x39\x2b\xee\xc7\xcd\x5d\xe2\x67\xe9\x2d\x86\xb3\x69\x58\x14\xc0\xd9\x13\xc4\x98\x21\x22\x58\xc4\x58\xee\xf0\xeb\x8a\x3e\xa4\x04\x44\x4b\x70\x18\xae\x4e\xfb\xbc\xf3\xd6\x68\x8f\xd3\x32\x0a\x00\x80\x7c\xfe\x42\x19\xa3\x2e\x58\x4a\xdb\x96\xe7\x10\xec\x12\xaa\x4c\x00\x76\x79\x39\x1c\xea\xc9\x6a\x0d\xc5\xfd\x88\x71\x31\x44\xc5\xc4\x5c\x41\xfb\x01\xc3\xea\xd1\x34\x7d\x4a\xca\xdf\xd1\x34\xfd\x3a\x75\x30\xdb\xcd\x7f\x1b\x1a\xe1\x17\x6d\x04\x00\xcd\x6a\xa2\xdb\x6e\xb7\xe8\xbd\x54\xc8\x3d\x74\xc3\xc8\x19\xb9\x39\xa2\x94\x7a\x56\xd9\x53\x8b\x97\xdc\xd8\x98\x6e\x87\x16\x65\xc0\xc1\xcf\xe5\x07\x2b\x1c\x7a\x9b\x14\x26\xad\x2a\xa1\x52\x51\xca\x94\x12\x5d\x3c\x66\xb1\x7f\xd1\xf3\x55\x7f\x8f\x41\xdd\xc0\x8a\x48\xfc\x06\x00\x00\xff\xff\x37\x19\x19\x13\xae\x02\x00\x00"),
		},
		"/{{.ServerDir}}": &vfsgen۰DirInfo{
			name:    "{{.ServerDir}}",
			modTime: time.Date(2019, 1, 2, 0, 46, 2, 701309127, time.UTC),
		},
		"/{{.ServerDir}}/{{.Path}}_server.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "{{.Path}}_server.go.tmpl",
			modTime:          time.Date(2019, 1, 2, 0, 46, 2, 676823598, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\x31\x9f\xf0\xa1\x90\x0a\x9b\xbe\x07\xe8\xa9\x2d\x8c\x1e\xea\x18\xfd\x39\xf4\xc8\x50\x6b\x59\xa8\x45\x2a\xe4\xaa\x49\x40\xf0\xdd\x0b\x52\x42\x62\xa3\x3c\x09\xdc\xd9\x99\xd9\x1d\xed\xa4\xf4\x6f\xd5\x13\x42\x90\x7b\x2b\x8f\xeb\x2b\x46\x21\x86\x71\xb2\x8e\xd1\x88\xaa\xd6\xd6\x30\x3d\x73\x2d\x42\x70\xca\xf4\x84\xd4\xfb\x25\xe3\x3e\x46\x51\xd5\x21\xc8\x18\x13\xbc\x05\x99\x2e\xb1\xab\x10\xe4\xf1\xe1\x4d\xf2\xa0\x46\x8a\x11\x75\x08\xb8\xa9\x1f\x15\x9f\x91\xb8\xad\x10\xbb\xdd\x3a\xc6\x77\x72\x7f\xc8\xad\x94\xc1\x43\x41\xdb\x71\xb2\x7e\x60\xc2\x60\x98\xdc\x49\x69\x82\x3d\xa1\x60\x82\x18\x65\x41\x45\x99\x0e\xbd\xed\xc9\xf8\x5c\x5d\x41\x29\xf8\x65\xa2\xa2\xeb\xab\x4d\x28\xee\x52\xb6\x11\xd5\xbf\x1e\x22\xe6\xcd\x0e\xf4\x54\xb0\xd1\x8e\x14\x53\xda\xd0\xd0\x53\x79\x0e\xcf\xca\x68\x92\xe2\x34\x1b\x5d\x56\x69\xda\x12\x33\x88\xca\x11\xcf\xce\xe0\xdd\x8a\xb2\x9b\x35\x2f\x68\x88\x69\xac\xeb\xe5\xaf\x40\xf8\xfc\x40\x10\x51\x84\xf0\x7f\x6f\x71\xf7\x21\xfd\x72\x6c\x63\x2e\x4c\x0f\xfb\xa5\x94\x42\x59\x8b\x5b\xac\x97\xf1\x95\xf8\x6c\xbb\x74\x16\x79\xe0\xc6\xe3\x7d\xd6\xb8\x71\xc8\x03\x2f\x9d\x31\x36\x9a\x9f\xb1\x9e\x98\xfc\xb8\x7c\x37\x70\xf4\x98\x98\xf2\x1b\x3d\xce\xe4\x79\x6f\x91\x7d\x6f\xef\xa9\x45\xb3\xf4\xf8\xc9\x1a\x4f\xe5\xa6\x0d\xc8\x39\xeb\xda\x94\xc8\x6e\x87\x1f\xf7\x9f\xee\xef\x70\xb0\x8c\x17\x62\x0c\xe3\x74\xa1\x91\x0c\x53\x27\x5f\x03\x33\xc3\x65\x03\xcf\x8a\x67\x2f\x3f\x27\x6e\xa3\x6d\x47\x5e\xfe\x34\x57\xed\x1b\xd4\x8b\xd4\x2f\x3b\xc3\x9f\xed\x7c\xe9\xde\xd4\x30\xf0\x7f\x75\x9b\xf3\x23\xd3\xe5\x8c\xfe\x06\x00\x00\xff\xff\x33\xf7\xeb\x95\x6a\x03\x00\x00"),
		},
		"/{{.ServerDir}}/{{.Path}}_server_register_funcs.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "{{.Path}}_server_register_funcs.go.tmpl",
			modTime:          time.Date(2019, 1, 2, 0, 46, 2, 700670211, time.UTC),
			uncompressedSize: 734,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x51\xcd\xce\xd3\x30\x10\x3c\x7f\x7e\x8a\x55\x4e\x49\x55\x1c\x40\xe2\x09\xf2\x21\xe0\x40\x5b\xd1\x4a\x9c\x5d\x77\x71\x2d\x62\x3b\xda\xac\x4b\x4a\x94\x77\x47\x4e\x0c\x14\x15\x84\x7a\xb2\xf7\x67\x66\x76\x76\xeb\x1a\x9a\x70\x42\x30\xe8\x91\x14\xe3\x09\x8e\x57\x30\x96\xcf\xf1\x28\x75\x70\xb5\xfd\x1e\x9d\xf5\x6f\x5e\xbf\x7a\x59\x1b\x52\x9d\x95\xf0\xbc\x85\xcd\xf6\x00\x6f\x9f\x3f\x1c\xa4\x10\x9d\xd2\x5f\x95\x41\x18\x47\xf9\x2e\xc8\x5d\x8e\xa6\x49\x08\xeb\xba\x40\x0c\xa5\x78\x2a\x74\xf0\x8c\x03\x17\x42\x3c\x15\x37\xdc\x86\x3a\xfd\x02\x75\xe8\xaf\x3d\x63\x0e\x8d\x62\xfc\xa6\xae\x35\x45\xcf\xd6\x61\x91\x10\x21\x98\x16\xa5\x09\xad\xf2\x46\x06\x32\x73\x67\x22\x1b\x47\xb9\x3b\xfe\x96\xdd\x28\x87\xd3\x04\xc5\x38\xc2\x1f\xf9\x9d\xe2\x33\x4c\x53\x21\x2a\x21\xea\x1a\x3e\xa1\xb1\x3d\x23\x7d\xb6\x7c\xde\x23\x5d\x90\xc0\xba\xae\x45\x87\x9e\x7b\x30\xc1\xa0\xef\xe7\xb4\x5c\xaa\xf2\x1e\x20\xc5\x97\xe8\x35\x94\x3d\xac\x16\xe3\x7b\xa6\xa8\x79\x19\xa0\xfa\x8b\x42\x99\x46\xde\x5f\x08\x56\xe9\x93\x89\x2b\x18\xff\xe1\xe1\x97\x64\x66\x9f\xdb\x97\xd2\x4f\xa6\x35\xf4\x95\x98\xee\x0c\xbd\x57\xfe\xd4\x3e\xe4\x28\x23\x1e\xb0\x94\x11\xa5\xe6\x01\xf2\x69\x65\xb3\xbc\x6b\x70\x71\x80\x55\xbe\xde\x22\xf7\x31\x0e\xeb\xd4\xe7\xb3\xf9\xa6\xb5\xe8\xb9\x09\xde\x57\x80\x44\x81\xd2\x1a\x08\x39\x92\x87\xff\x6e\x23\x31\x5a\x9d\x0b\x39\xb8\x99\x67\xd6\x5f\xd4\xd2\x76\x7e\x04\x00\x00\xff\xff\xe9\x3e\xb7\x95\xde\x02\x00\x00"),
		},
		"/{{.ServerDir}}/{{.Path}}_server_test.go.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "{{.Path}}_server_test.go.tmpl",
			modTime:          time.Date(2018, 12, 30, 4, 13, 20, 0, time.UTC),
			uncompressedSize: 574,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\xce\xda\x30\x10\x84\xcf\xf6\x53\x6c\x2d\x5a\x25\x15\xf8\x01\x2a\x71\xa9\x54\xa1\x1e\x8a\x50\xcb\x1d\x85\x64\x13\x22\xc0\x0e\x6b\x27\x45\x5a\xf9\xdd\xab\x35\xa9\xf8\x11\xb7\x64\x3d\xdf\xce\xec\x0c\x55\x7d\xae\x3a\x04\x66\xbb\xf1\x76\x37\xff\xa5\xa4\x99\xfb\x16\xec\x2f\x8c\x27\xdf\x84\x94\x74\x7f\x1d\x3c\x45\x28\xb4\x32\xb5\x77\x11\xef\xd1\x68\x65\x22\x86\xd8\xbb\xce\x68\x66\xaa\x5c\x87\x20\x5b\xf6\x18\xe2\xcf\x2c\x17\x50\x19\x66\x9b\x92\x48\x56\x80\xae\x49\x49\x6b\xc5\x6c\x77\xc7\xa7\xe1\xb6\xba\x62\x4a\x60\x98\xe1\x65\xbe\xab\xe2\x09\x84\x2d\x35\xf3\xa2\xf3\xf0\x6d\x2d\x0e\xb0\xca\x01\x17\xc3\x71\xf3\x18\x09\x33\x0f\x57\x30\x07\x79\x46\x6f\x47\x57\x83\x84\x3a\xe4\x25\xf6\x0f\xd2\x84\xf4\xf0\x3c\x30\xcf\xca\x94\x8a\x08\x5f\xe7\x83\xec\xbe\x04\xd6\x2a\x4c\x24\xfb\xb7\xf8\xf7\x9d\x2c\x4a\xad\x55\x1d\xef\x22\x98\x1b\xb1\xdf\xab\xfa\xdc\x91\x1f\x5d\x53\x94\x5a\x11\xde\xe4\xf1\x0b\xb3\xfd\x8d\xb7\x11\x43\xdc\x78\xc8\xa1\x5f\xef\x66\x69\x84\x30\x0c\x4b\x40\xca\x86\x61\x22\xfb\x31\x58\x1d\xef\x4b\x20\xbc\x89\x65\xdf\x66\xd5\xa7\x35\xb8\xfe\x22\x21\x55\xb4\x3f\x88\x3c\xb5\x85\x21\x8c\x23\x39\x6c\xa0\x72\x22\xf2\x04\x9f\x27\x93\xb7\x96\x5a\xa5\x07\x2c\x46\xb0\x7e\xa3\x05\x0e\x83\x77\x01\x21\x9c\xfc\x78\x69\xc0\xf9\x28\x22\x93\x51\xa9\x16\x5d\x33\x97\xfc\xff\xeb\x5f\x00\x00\x00\xff\xff\x39\x2b\xf8\xd2\x3e\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/{{.ProtoDir}}"].(os.FileInfo),
		fs["/{{.ServerDir}}"].(os.FileInfo),
	}
	fs["/{{.ProtoDir}}"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/{{.ProtoDir}}/{{.Path}}.proto.tmpl"].(os.FileInfo),
	}
	fs["/{{.ServerDir}}"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/{{.ServerDir}}/{{.Path}}_server.go.tmpl"].(os.FileInfo),
		fs["/{{.ServerDir}}/{{.Path}}_server_register_funcs.go.tmpl"].(os.FileInfo),
		fs["/{{.ServerDir}}/{{.Path}}_server_test.go.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
