// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package svcgen

import (
	"github.com/gofunct/gogen/pkg/cli"
	"github.com/gofunct/gogen/pkg/gencmd"
	"github.com/gofunct/gogen/pkg/gogencmd"
	"github.com/gofunct/gogen/pkg/protoc"
)

// Injectors from wire.go:

func NewApp(command *gencmd.Command) (*App, error) {
	ctx := gencmd.ProvideCtx(command)
	gogencmdCtx := gencmd.ProvideGogenCtx(ctx)
	config := gogencmd.ProvideProtocConfig(gogencmdCtx)
	fs := gogencmd.ProvideFS(gogencmdCtx)
	execInterface := gogencmd.ProvideExecer(gogencmdCtx)
	io := gogencmd.ProvideIO(gogencmdCtx)
	ui := cli.UIInstance(io)
	rootDir := gogencmd.ProvideRootDir(gogencmdCtx)
	bingenConfig := protoc.ProvideBingenConfig(fs, execInterface, io, rootDir)
	repository, err := protoc.ProvideToolRepository(bingenConfig)
	if err != nil {
		return nil, err
	}
	wrapper := protoc.NewWrapper(config, fs, execInterface, ui, repository, rootDir)
	gogencmdConfig := gogencmd.ProvideConfig(gogencmdCtx)
	builder := ProvideParamsBuilder(rootDir, config, gogencmdConfig)
	app := &App{
		ProtocWrapper: wrapper,
		ParamsBuilder: builder,
	}
	return app, nil
}
