// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package inject

import (
	"github.com/gofunct/common/executor"
	"github.com/gofunct/common/ui"
	"github.com/gofunct/gogen/gogen"
	"github.com/gofunct/gogen/module"
	"github.com/gofunct/gogen/protoc"
	"github.com/gofunct/gogen/usecase"
	"github.com/izumin5210/gex/pkg/tool"
)

// Injectors from injectors.go:

func NewUI(ctx *gogen.Ctx) ui.UI {
	io := gogen.ProvideIO(ctx)
	uiUI := ui.NewUI(io)
	return uiUI
}

func NewCommandExecutor(ctx *gogen.Ctx) executor.Executor {
	io := gogen.ProvideIO(ctx)
	executorExecutor := executor.NewExecutor(io)
	return executorExecutor
}

func NewGenerator(ctx *gogen.Ctx) module.Generator {
	io := gogen.ProvideIO(ctx)
	uiUI := ui.NewUI(io)
	generator := ProvideGenerator(ctx, uiUI)
	return generator
}

func NewScriptLoader(ctx *gogen.Ctx) module.ScriptLoader {
	io := gogen.ProvideIO(ctx)
	executorExecutor := executor.NewExecutor(io)
	scriptLoader := ProvideScriptLoader(ctx, executorExecutor)
	return scriptLoader
}

func NewToolRepository(ctx *gogen.Ctx) (tool.Repository, error) {
	fs := gogen.ProvideFS(ctx)
	execInterface := gogen.ProvideExecer(ctx)
	io := gogen.ProvideIO(ctx)
	rootDir := gogen.ProvideRootDir(ctx)
	config := protoc.ProvideGexConfig(fs, execInterface, io, rootDir)
	repository, err := protoc.ProvideToolRepository(config)
	if err != nil {
		return nil, err
	}
	return repository, nil
}

func NewProtocWrapper(ctx *gogen.Ctx) (protoc.Wrapper, error) {
	config := gogen.ProvideProtocConfig(ctx)
	fs := gogen.ProvideFS(ctx)
	execInterface := gogen.ProvideExecer(ctx)
	io := gogen.ProvideIO(ctx)
	uiUI := ui.NewUI(io)
	rootDir := gogen.ProvideRootDir(ctx)
	gexConfig := protoc.ProvideGexConfig(fs, execInterface, io, rootDir)
	repository, err := protoc.ProvideToolRepository(gexConfig)
	if err != nil {
		return nil, err
	}
	wrapper := protoc.NewWrapper(config, fs, execInterface, uiUI, repository, rootDir)
	return wrapper, nil
}

func NewInitializeProjectUsecase(ctx *gogen.Ctx) usecase.InitializeProjectUsecase {
	fs := gogen.ProvideFS(ctx)
	execInterface := gogen.ProvideExecer(ctx)
	io := gogen.ProvideIO(ctx)
	rootDir := gogen.ProvideRootDir(ctx)
	config := protoc.ProvideGexConfig(fs, execInterface, io, rootDir)
	uiUI := ui.NewUI(io)
	generator := ProvideGenerator(ctx, uiUI)
	initializeProjectUsecase := ProvideInitializeProjectUsecase(ctx, config, uiUI, generator)
	return initializeProjectUsecase
}
